import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv('fake reviews dataset.csv')
df['label'] = df['label'].map({'CG': 1, 'OR': 0})  # Mapping labels 'CG' to 1, 'OR' to 0
print(df.head())
X = df['text_']  # The review text
y = df['label']  # The labels (0: Original Review, 1: Computer Generated)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
vectorizer = TfidfVectorizer(max_features=3000)  # Limit the features to 3000 terms
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)
logistic_model = LogisticRegression(max_iter=500)  
logistic_model.fit(X_train_tfidf, y_train)
logistic_pred = logistic_model.predict(X_test_tfidf)
logistic_accuracy = accuracy_score(y_test, logistic_pred)
print(f"Logistic Regression Model Accuracy: {logistic_accuracy * 100:.2f}%")
print("Classification Report:")
print(classification_report(y_test, logistic_pred))
conf_matrix = confusion_matrix(y_test, logistic_pred)
print("Confusion Matrix:")
print(conf_matrix)
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=['Original Review', 'Computer Generated'], yticklabels=['Original Review', 'Computer Generated'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()
original_reviews = df[df['label'] == 0].shape[0]
computer_generated_reviews = df[df['label'] == 1].shape[0]
print(f"Number of Original Reviews: {original_reviews}")
print(f"Number of Computer Generated Reviews: {computer_generated_reviews}")
labels = ['Original Review', 'Computer Generated']
counts = [original_reviews, computer_generated_reviews]
plt.figure(figsize=(6, 4))
plt.bar(labels, counts, color=['green', 'red'])
plt.title('Distribution of Reviews')
plt.xlabel('Review Type')
plt.ylabel('Count')
plt.show()
def predict_with_logistic(review_text):
    review_tfidf = vectorizer.transform([review_text])
    prediction = logistic_model.predict(review_tfidf)
    label = 'Computer Generated' if prediction[0] == 1 else 'Original Review'
    return label
user_review = input("Please enter a review to classify: ")
logistic_result = predict_with_logistic(user_review)
print(f"Logistic Regression Prediction: {logistic_result}")
